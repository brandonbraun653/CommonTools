//**********************************************************************************************************************
// File:
//   bbb_ram_init.JLinkScript
//
// Description:
//   Initialization procedures for the beaglebone black. This was taken from the TI CCS gel file for
//   this device and then modified to work with JLink.
//
// 2021 | Brandon Braun | brandonbraun653@gmail.com
//**********************************************************************************************************************

//#################################################################################################
//                              DEVICE CONSTANTS AND DEFINITIONS
//#################################################################################################
//****************************************************
// PRCM module definitions
//****************************************************
__constant U32 PRCM_BASE_ADDR                                    = 0x44E00000;
__constant U32 CM_PER_EMIF_CLKCTRL                               = PRCM_BASE_ADDR + 0x028;
__constant U32 CM_PER_EMIF_FW_CLKCTRL                            = PRCM_BASE_ADDR + 0x0D0;
__constant U32 CM_AUTOIDLE_DPLL_MPU                              = PRCM_BASE_ADDR + 0x41C;
__constant U32 CM_IDLEST_DPLL_MPU                                = PRCM_BASE_ADDR + 0x420;
__constant U32 CM_CLKSEL_DPLL_MPU                                = PRCM_BASE_ADDR + 0x42C;
__constant U32 CM_AUTOIDLE_DPLL_DDR                              = PRCM_BASE_ADDR + 0x430;
__constant U32 CM_IDLEST_DPLL_DDR                                = PRCM_BASE_ADDR + 0x434;
__constant U32 CM_CLKSEL_DPLL_DDR                                = PRCM_BASE_ADDR + 0x440;
__constant U32 CM_AUTOIDLE_DPLL_DISP                             = PRCM_BASE_ADDR + 0x444;
__constant U32 CM_IDLEST_DPLL_DISP                               = PRCM_BASE_ADDR + 0x448;
__constant U32 CM_CLKSEL_DPLL_DISP                               = PRCM_BASE_ADDR + 0x454;
__constant U32 CM_AUTOIDLE_DPLL_CORE                             = PRCM_BASE_ADDR + 0x458;
__constant U32 CM_IDLEST_DPLL_CORE                               = PRCM_BASE_ADDR + 0x45C;
__constant U32 CM_CLKSEL_DPLL_CORE                               = PRCM_BASE_ADDR + 0x468;
__constant U32 CM_AUTOIDLE_DPLL_PER                              = PRCM_BASE_ADDR + 0x46C;
__constant U32 CM_IDLEST_DPLL_PER                                = PRCM_BASE_ADDR + 0x470;
__constant U32 CM_CLKSEL_DPLL_PER                                = PRCM_BASE_ADDR + 0x49C;
__constant U32 CM_DIV_M4_DPLL_CORE                               = PRCM_BASE_ADDR + 0x480;
__constant U32 CM_DIV_M5_DPLL_CORE                               = PRCM_BASE_ADDR + 0x484;
__constant U32 CM_CLKMODE_DPLL_MPU                               = PRCM_BASE_ADDR + 0x488;
__constant U32 CM_CLKMODE_DPLL_PER                               = PRCM_BASE_ADDR + 0x48C;
__constant U32 CM_CLKMODE_DPLL_CORE                              = PRCM_BASE_ADDR + 0x490;
__constant U32 CM_CLKMODE_DPLL_DDR                               = PRCM_BASE_ADDR + 0x494;
__constant U32 CM_CLKMODE_DPLL_DISP                              = PRCM_BASE_ADDR + 0x498;
__constant U32 CM_DIV_M2_DPLL_DDR                                = PRCM_BASE_ADDR + 0x4A0;
__constant U32 CM_DIV_M2_DPLL_DISP                               = PRCM_BASE_ADDR + 0x4A4;
__constant U32 CM_DIV_M2_DPLL_MPU                                = PRCM_BASE_ADDR + 0x4A8;
__constant U32 CM_DIV_M2_DPLL_PER                                = PRCM_BASE_ADDR + 0x4AC;
__constant U32 CM_DIV_M6_DPLL_CORE                               = PRCM_BASE_ADDR + 0x4D8;
__constant U32 CM_CLKOUT_CTRL                                    = PRCM_BASE_ADDR + 0x700;

//****************************************************
// Control module definitions
//****************************************************
__constant U32 CONTROL_BASE_ADDR                                 = 0x44E10000;
__constant U32 CONTROL_STATUS                                    = CONTROL_BASE_ADDR + 0x40;
__constant U32 CONF_XDMA_EVENT_INTR1                             = CONTROL_BASE_ADDR + 0x9b4;

// DDR IO Control Registers
__constant U32 DDR_IO_CTRL                                       = CONTROL_BASE_ADDR + 0x0E04;
__constant U32 VTP_CTRL_REG                                      = CONTROL_BASE_ADDR + 0x0E0C;
__constant U32 DDR_CKE_CTRL                                      = CONTROL_BASE_ADDR + 0x131C;
__constant U32 DDR_CMD0_IOCTRL                                   = CONTROL_BASE_ADDR + 0x1404;
__constant U32 DDR_CMD1_IOCTRL                                   = CONTROL_BASE_ADDR + 0x1408;
__constant U32 DDR_CMD2_IOCTRL                                   = CONTROL_BASE_ADDR + 0x140C;
__constant U32 DDR_DATA0_IOCTRL                                  = CONTROL_BASE_ADDR + 0x1440;
__constant U32 DDR_DATA1_IOCTRL                                  = CONTROL_BASE_ADDR + 0x1444;

//********************************************************************
// EMIF4DC module definitions
//********************************************************************
__constant U32 EMIF_BASE_ADDR                                   = 0x4C000000;
__constant U32 EMIF_STATUS_REG                                  = EMIF_BASE_ADDR + 0x004;
__constant U32 EMIF_SDRAM_CONFIG_REG                            = EMIF_BASE_ADDR + 0x008;
__constant U32 EMIF_SDRAM_CONFIG_2_REG                          = EMIF_BASE_ADDR + 0x00C;
__constant U32 EMIF_SDRAM_REF_CTRL_REG                          = EMIF_BASE_ADDR + 0x010;
__constant U32 EMIF_SDRAM_REF_CTRL_SHDW_REG                     = EMIF_BASE_ADDR + 0x014;
__constant U32 EMIF_SDRAM_TIM_1_REG                             = EMIF_BASE_ADDR + 0x018;
__constant U32 EMIF_SDRAM_TIM_1_SHDW_REG                        = EMIF_BASE_ADDR + 0x01C;
__constant U32 EMIF_SDRAM_TIM_2_REG                             = EMIF_BASE_ADDR + 0x020;
__constant U32 EMIF_SDRAM_TIM_2_SHDW_REG                        = EMIF_BASE_ADDR + 0x024;
__constant U32 EMIF_SDRAM_TIM_3_REG                             = EMIF_BASE_ADDR + 0x028;
__constant U32 EMIF_SDRAM_TIM_3_SHDW_REG                        = EMIF_BASE_ADDR + 0x02C;
__constant U32 EMIF_LPDDR2_NVM_TIM_REG                          = EMIF_BASE_ADDR + 0x030;
__constant U32 EMIF_LPDDR2_NVM_TIM_SHDW_REG                     = EMIF_BASE_ADDR + 0x034;
__constant U32 EMIF_PWR_MGMT_CTRL_REG                           = EMIF_BASE_ADDR + 0x038;
__constant U32 EMIF_PWR_MGMT_CTRL_SHDW_REG                      = EMIF_BASE_ADDR + 0x03C;
__constant U32 EMIF_LPDDR2_MODE_REG_DATA_REG                    = EMIF_BASE_ADDR + 0x040;
__constant U32 EMIF_LPDDR2_MODE_REG_CFG_REG                     = EMIF_BASE_ADDR + 0x050;
__constant U32 EMIF_OCP_CONFIG_REG                              = EMIF_BASE_ADDR + 0x054;
__constant U32 EMIF_OCP_CFG_VAL_1_REG                           = EMIF_BASE_ADDR + 0x058;
__constant U32 EMIF_OCP_CFG_VAL_2_REG                           = EMIF_BASE_ADDR + 0x05C;
__constant U32 EMIF_IODFT_TLGC_REG                              = EMIF_BASE_ADDR + 0x060;
__constant U32 EMIF_IODFT_CTRL_MISR_RSLT_REG                    = EMIF_BASE_ADDR + 0x064;
__constant U32 EMIF_IODFT_ADDR_MISR_RSLT_REG                    = EMIF_BASE_ADDR + 0x068;
__constant U32 EMIF_IODFT_DATA_MISR_RSLT_1_REG                  = EMIF_BASE_ADDR + 0x06C;
__constant U32 EMIF_IODFT_DATA_MISR_RSLT_2_REG                  = EMIF_BASE_ADDR + 0x070;
__constant U32 EMIF_IODFT_DATA_MISR_RSLT_3_REG                  = EMIF_BASE_ADDR + 0x074;
__constant U32 EMIF_PERF_CNT_1_REG                              = EMIF_BASE_ADDR + 0x080;
__constant U32 EMIF_PERF_CNT_2_REG                              = EMIF_BASE_ADDR + 0x084;
__constant U32 EMIF_PERF_CNT_CFG_REG                            = EMIF_BASE_ADDR + 0x088;
__constant U32 EMIF_PERF_CNT_SEL_REG                            = EMIF_BASE_ADDR + 0x08C;
__constant U32 EMIF_PERF_CNT_TIM_REG                            = EMIF_BASE_ADDR + 0x090;
__constant U32 EMIF_READ_IDLE_CTRL_REG                          = EMIF_BASE_ADDR + 0x098;
__constant U32 EMIF_READ_IDLE_CTRL_SHDW_REG                     = EMIF_BASE_ADDR + 0x09C;
__constant U32 EMIF_IRQ_EOI_REG                                 = EMIF_BASE_ADDR + 0x0A0;
__constant U32 EMIF_IRQSTATUS_RAW_SYS_REG                       = EMIF_BASE_ADDR + 0x0A4;
__constant U32 EMIF_IRQSTATUS_SYS_REG                           = EMIF_BASE_ADDR + 0x0AC;
__constant U32 EMIF_IRQENABLE_CLR_SYS_REG                       = EMIF_BASE_ADDR + 0x0BC;
__constant U32 EMIF_ZQ_CONFIG_REG                               = EMIF_BASE_ADDR + 0x0C8;
__constant U32 EMIF_TEMP_ALERT_CONFIG_REG                       = EMIF_BASE_ADDR + 0x0CC;
__constant U32 EMIF_OCP_ERR_LOG_REG                             = EMIF_BASE_ADDR + 0x0D0;
__constant U32 EMIF_RDWR_LVL_RMP_WIN_REG                        = EMIF_BASE_ADDR + 0x0D4;
__constant U32 EMIF_RDWR_LVL_RMP_CTRL_REG                       = EMIF_BASE_ADDR + 0x0D8;
__constant U32 EMIF_RDWR_LVL_CTRL_REG                           = EMIF_BASE_ADDR + 0x0DC;
__constant U32 EMIF_DDR_PHY_CTRL_1_REG                          = EMIF_BASE_ADDR + 0x0E4;
__constant U32 EMIF_DDR_PHY_CTRL_1_SHDW_REG                     = EMIF_BASE_ADDR + 0x0E8;
__constant U32 EMIF_DDR_PHY_CTRL_2_REG                          = EMIF_BASE_ADDR + 0x0EC;
__constant U32 EMIF_PRI_COS_MAP_REG                             = EMIF_BASE_ADDR + 0x100;
__constant U32 EMIF_CONNID_COS_1_MAP_REG                        = EMIF_BASE_ADDR + 0x104;
__constant U32 EMIF_CONNID_COS_2_MAP_REG                        = EMIF_BASE_ADDR + 0x108;
__constant U32 EMIF_RD_WR_EXEC_THRSH_REG                        = EMIF_BASE_ADDR + 0x120;


//*******************************************************************
// DDR PHY registers
//*******************************************************************
__constant U32 DDR_PHY_BASE_ADDR                                 = 0x44E12000;

// CMD0
__constant U32 CMD0_REG_PHY_CTRL_SLAVE_RATIO_0                   = 0x01C + DDR_PHY_BASE_ADDR;
__constant U32 CMD0_REG_PHY_CTRL_SLAVE_FORCE_0                   = 0x020 + DDR_PHY_BASE_ADDR;
__constant U32 CMD0_REG_PHY_CTRL_SLAVE_DELAY_0                   = 0x024 + DDR_PHY_BASE_ADDR;
__constant U32 CMD0_REG_PHY_DLL_LOCK_DIFF_0                      = 0x028 + DDR_PHY_BASE_ADDR;
__constant U32 CMD0_REG_PHY_INVERT_CLKOUT_0                      = 0x02C + DDR_PHY_BASE_ADDR;
__constant U32 CMD0_PHY_REG_STATUS_PHY_CTRL_DLL_LOCK_0           = 0x030 + DDR_PHY_BASE_ADDR;
__constant U32 CMD0_PHY_REG_STATUS_PHY_CTRL_OF_IN_LOCK_STATE_0   = 0x034 + DDR_PHY_BASE_ADDR;
__constant U32 CMD0_PHY_REG_STATUS_PHY_CTRL_OF_IN_DELAY_VALUE_0  = 0x038 + DDR_PHY_BASE_ADDR;
__constant U32 CMD0_PHY_REG_STATUS_PHY_CTRL_OF_OUT_DELAY_VALUE_0 = 0x03C + DDR_PHY_BASE_ADDR;

// CMD1
__constant U32 CMD1_REG_PHY_CTRL_SLAVE_RATIO_0                   = 0x050 + DDR_PHY_BASE_ADDR;
__constant U32 CMD1_REG_PHY_CTRL_SLAVE_FORCE_0                   = 0x054 + DDR_PHY_BASE_ADDR;
__constant U32 CMD1_REG_PHY_CTRL_SLAVE_DELAY_0                   = 0x058 + DDR_PHY_BASE_ADDR;
__constant U32 CMD1_REG_PHY_DLL_LOCK_DIFF_0                      = 0x05C + DDR_PHY_BASE_ADDR;
__constant U32 CMD1_REG_PHY_INVERT_CLKOUT_0                      = 0x060 + DDR_PHY_BASE_ADDR;
__constant U32 CMD1_PHY_REG_STATUS_PHY_CTRL_DLL_LOCK_0           = 0x064 + DDR_PHY_BASE_ADDR;
__constant U32 CMD1_PHY_REG_STATUS_PHY_CTRL_OF_IN_LOCK_STATE_0   = 0x068 + DDR_PHY_BASE_ADDR;
__constant U32 CMD1_PHY_REG_STATUS_PHY_CTRL_OF_IN_DELAY_VALUE_0  = 0x06C + DDR_PHY_BASE_ADDR;
__constant U32 CMD1_PHY_REG_STATUS_PHY_CTRL_OF_OUT_DELAY_VALUE_0 = 0x070 + DDR_PHY_BASE_ADDR;

// CMD2
__constant U32 CMD2_REG_PHY_CTRL_SLAVE_RATIO_0                   = 0x084 + DDR_PHY_BASE_ADDR;
__constant U32 CMD2_REG_PHY_CTRL_SLAVE_FORCE_0                   = 0x088 + DDR_PHY_BASE_ADDR;
__constant U32 CMD2_REG_PHY_CTRL_SLAVE_DELAY_0                   = 0x08C + DDR_PHY_BASE_ADDR;
__constant U32 CMD2_REG_PHY_DLL_LOCK_DIFF_0                      = 0x090 + DDR_PHY_BASE_ADDR;
__constant U32 CMD2_REG_PHY_INVERT_CLKOUT_0                      = 0x094 + DDR_PHY_BASE_ADDR;
__constant U32 CMD2_PHY_REG_STATUS_PHY_CTRL_DLL_LOCK_0           = 0x098 + DDR_PHY_BASE_ADDR;
__constant U32 CMD2_PHY_REG_STATUS_PHY_CTRL_OF_IN_LOCK_STATE_0   = 0x09C + DDR_PHY_BASE_ADDR;
__constant U32 CMD2_PHY_REG_STATUS_PHY_CTRL_OF_IN_DELAY_VALUE_0  = 0x0A0 + DDR_PHY_BASE_ADDR;
__constant U32 CMD2_PHY_REG_STATUS_PHY_CTRL_OF_OUT_DELAY_VALUE_0 = 0x0A4 + DDR_PHY_BASE_ADDR;

// DATA0
__constant U32 DATA0_REG_PHY_DATA_SLICE_IN_USE_0                 = 0x0B8 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_DIS_CALIB_RST_0                     = 0x0BC + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_RDC_FIFO_RST_ERR_CNT_CLR_0          = 0x0C0 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_PHY_RDC_FIFO_RST_ERR_CNT_0                  = 0x0C4 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_RD_DQS_SLAVE_RATIO_0                = 0x0C8 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_RD_DQS_SLAVE_RATIO_1                = 0x0CC + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_RD_DQS_SLAVE_FORCE_0                = 0x0D0 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_RD_DQS_SLAVE_DELAY_0                = 0x0D4 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_RD_DQS_SLAVE_DELAY_1                = 0x0D8 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WR_DQS_SLAVE_RATIO_0                = 0x0DC + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WR_DQS_SLAVE_RATIO_1                = 0x0E0 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WR_DQS_SLAVE_FORCE_0                = 0x0E4 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WR_DQS_SLAVE_DELAY_0                = 0x0E8 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WR_DQS_SLAVE_DELAY_1                = 0x0EC + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WRLVL_INIT_RATIO_0                  = 0x0F0 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WRLVL_INIT_RATIO_1                  = 0x0F4 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WRLVL_INIT_MODE_0                   = 0x0F8 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_GATELVL_INIT_RATIO_0                = 0x0FC + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_GATELVL_INIT_RATIO_1                = 0x100 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_GATELVL_INIT_MODE_0                 = 0x104 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_FIFO_WE_SLAVE_RATIO_0               = 0x108 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_FIFO_WE_SLAVE_RATIO_1               = 0x10C + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_FIFO_WE_IN_FORCE_0                  = 0x110 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_FIFO_WE_IN_DELAY_0                  = 0x114 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_FIFO_WE_IN_DELAY_1                  = 0x118 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WR_DATA_SLAVE_RATIO_0               = 0x120 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WR_DATA_SLAVE_RATIO_1               = 0x124 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WR_DATA_SLAVE_FORCE_0               = 0x128 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WR_DATA_SLAVE_DELAY_0               = 0x12C + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_WR_DATA_SLAVE_DELAY_1               = 0x130 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_USE_RANK0_DELAYS_0                  = 0x134 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_DLL_LOCK_DIFF_0                     = 0x138 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_PHY_REG_STATUS_DLL_LOCK_0                   = 0x13C + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_PHY_REG_STATUS_OF_IN_LOCK_STATE_0           = 0x140 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_PHY_REG_STATUS_OF_IN_DELAY_VALUE_0          = 0x144 + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_PHY_REG_STATUS_OF_OUT_DELAY_VALUE_0         = 0x148 + DDR_PHY_BASE_ADDR;

// DATA1
__constant U32 DATA1_REG_PHY_DATA_SLICE_IN_USE_0                 = 0x15C + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_DIS_CALIB_RST_0                     = 0x160 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_RDC_FIFO_RST_ERR_CNT_CLR_0          = 0x164 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_PHY_RDC_FIFO_RST_ERR_CNT_0                  = 0x168 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_RD_DQS_SLAVE_RATIO_0                = 0x16C + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_RD_DQS_SLAVE_RATIO_1                = 0x170 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_RD_DQS_SLAVE_FORCE_0                = 0x174 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_RD_DQS_SLAVE_DELAY_0                = 0x178 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_RD_DQS_SLAVE_DELAY_1                = 0x17C + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WR_DQS_SLAVE_RATIO_0                = 0x180 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WR_DQS_SLAVE_RATIO_1                = 0x184 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WR_DQS_SLAVE_FORCE_0                = 0x188 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WR_DQS_SLAVE_DELAY_0                = 0x18C + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WR_DQS_SLAVE_DELAY_1                = 0x190 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WRLVL_INIT_RATIO_0                  = 0x194 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WRLVL_INIT_RATIO_1                  = 0x198 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WRLVL_INIT_MODE_0                   = 0x19C + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_GATELVL_INIT_RATIO_0                = 0x1A0 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_GATELVL_INIT_RATIO_1                = 0x1A4 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_GATELVL_INIT_MODE_0                 = 0x1A8 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_FIFO_WE_SLAVE_RATIO_0               = 0x1AC + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_FIFO_WE_SLAVE_RATIO_1               = 0x1B0 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_FIFO_WE_IN_FORCE_0                  = 0x1B4 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_FIFO_WE_IN_DELAY_0                  = 0x1B8 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_FIFO_WE_IN_DELAY_1                  = 0x1BC + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WR_DATA_SLAVE_RATIO_0               = 0x1C4 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WR_DATA_SLAVE_RATIO_1               = 0x1C8 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WR_DATA_SLAVE_FORCE_0               = 0x1CC + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WR_DATA_SLAVE_DELAY_0               = 0x1D0 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WR_DATA_SLAVE_DELAY_1               = 0x1D4 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_USE_RANK0_DELAYS_0                  = 0x1D8 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_DLL_LOCK_DIFF_0                     = 0x1DC + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_PHY_REG_STATUS_DLL_LOCK_0                   = 0x1E0 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_PHY_REG_STATUS_OF_IN_LOCK_STATE_0           = 0x1E4 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_PHY_REG_STATUS_OF_IN_DELAY_VALUE_0          = 0x1E8 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_PHY_REG_STATUS_OF_OUT_DELAY_VALUE_0         = 0x1EC + DDR_PHY_BASE_ADDR;

// FIFO
__constant U32 FIFO_WE_OUT0_IO_CONFIG_I_0                        = 0x338 + DDR_PHY_BASE_ADDR;
__constant U32 FIFO_WE_OUT0_IO_CONFIG_SR_0                       = 0x33C + DDR_PHY_BASE_ADDR;
__constant U32 FIFO_WE_OUT1_IO_CONFIG_I_0                        = 0x340 + DDR_PHY_BASE_ADDR;
__constant U32 FIFO_WE_OUT1_IO_CONFIG_SR_0                       = 0x344 + DDR_PHY_BASE_ADDR;
__constant U32 FIFO_WE_IN2_IO_CONFIG_I_0                         = 0x348 + DDR_PHY_BASE_ADDR;
__constant U32 FIFO_WE_IN2_IO_CONFIG_SR_0                        = 0x34C + DDR_PHY_BASE_ADDR;
__constant U32 FIFO_WE_IN3_IO_CONFIG_I_0                         = 0x350 + DDR_PHY_BASE_ADDR;
__constant U32 FIFO_WE_IN3_IO_CONFIG_SR_0                        = 0x354 + DDR_PHY_BASE_ADDR;

// Leveling
__constant U32 DATA0_REG_PHY_WRLVL_NUM_OF_DQ0                    = 0x35C + DDR_PHY_BASE_ADDR;
__constant U32 DATA0_REG_PHY_GATELVL_NUM_OF_DQ0                  = 0x360 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_WRLVL_NUM_OF_DQ0                    = 0x364 + DDR_PHY_BASE_ADDR;
__constant U32 DATA1_REG_PHY_GATELVL_NUM_OF_DQ0                  = 0x368 + DDR_PHY_BASE_ADDR;

//*******************************************************************
// Watchdog Timer registers
//*******************************************************************
__constant U32 WDT1_BASE_ADDR                                    = 0x44E35000;
__constant U32 WDT1_WSPR                                         = WDT1_BASE_ADDR + 0x48;
__constant U32 WDT1_W_PEND_WSPR                                  = WDT1_BASE_ADDR + 0x0034;

//******************************************************************
// DDR3=400MHz
// OPP100
// DDR3 PHY parameters
//******************************************************************
__constant U32 CMD_PHY_CTRL_SLAVE_RATIO                          = 0x80;
__constant U32 CMD_PHY_INVERT_CLKOUT                             = 0x0;
__constant U32 DATA_PHY_RD_DQS_SLAVE_RATIO                       = 0x38;
__constant U32 DATA_PHY_FIFO_WE_SLAVE_RATIO                      = 0x94;
__constant U32 DATA_PHY_WR_DQS_SLAVE_RATIO                       = 0x44;
__constant U32 DATA_PHY_WR_DATA_SLAVE_RATIO                      = 0x7d;
__constant U32 DDR_IOCTRL_VALUE                                  = 0x18B;

//******************************************************************
// EMIF parameters
// DDR3 = 400MHz
//******************************************************************
// RD_Latency = (CL + 2) - 1; CL=6 for DDR3-1600 speed grade and CK of 2.5ns
__constant U32 ALLOPP_DDR3_READ_LATENCY                          = 0x07;

//400MHz __constant U32tings
__constant U32 ALLOPP_DDR3_SDRAM_TIMING1                         = 0x0AAAD4DB;
__constant U32 ALLOPP_DDR3_SDRAM_TIMING2                         = 0x266B7FDA;
__constant U32 ALLOPP_DDR3_SDRAM_TIMING3                         = 0x501F867F;

// dynamic ODT = 2 (RZQ/2)
// SDRAM drive = 0 (RZQ/6)
// CWL = 0 (CAS write latency = 5)
// CL = 4 (CAS latency = 6)
// ROWSIZE = 6 (15 row bits)
// PAGESIZE = 2 (10 column bits)
// termination = 1 (RZQ/4)
// 400 * 7.8us = 0xC30
__constant U32 ALLOPP_DDR3_SDRAM_CONFIG                          = 0x61C05332;
__constant U32 ALLOPP_DDR3_REF_CTRL                              = 0x00000C30;
__constant U32 ALLOPP_DDR3_ZQ_CONFIG                             = 0x50074BE4;


//******************************************************************
// User Configurable Parameters
//  (Because why would we need local variables?)
//******************************************************************
U32 tmp         = 0;  // Scratch variable
U32 i           = 0;  // Loop iterator
U32 clk_in_mhz  = 0;
U32 ref_clk     = 0;
U32 clk_out4    = 0;
U32 clk_out5    = 0;
U32 clk_out6    = 0;
U32 clkmode     = 0;
U32 clksel      = 0;
U32 div_m2      = 0;
U32 div_m4      = 0;
U32 div_m5      = 0;
U32 div_m6      = 0;


//#################################################################################################
//                                    USER SETUP FUNCTIONS
//#################################################################################################

//******************************************************************************
// DisableWatchdog
//   Disables the on-chip hardware watchdog
//
//******************************************************************************
void DisableWatchdog()
{
  JLINK_SYS_MessageBox("Disabling Watchdog");

  JLINK_MEM_WriteU32( WDT1_WSPR, 0xaaaa );
  while( JLINK_MEM_ReadU32( WDT1_W_PEND_WSPR ) == 0x10 )
  {
    ;
  }

  JLINK_MEM_WriteU32( WDT1_WSPR, 0x5555 );
  while( JLINK_MEM_ReadU32( WDT1_W_PEND_WSPR ) == 0x10 )
  {
    ;
  }
}


//******************************************************************************
// GetInputClockFrequency
//   Reads the SYSBOOT registers to determine which strapping resistors
//   are set, then uses this info to discover the input crystal frequency.
//
//******************************************************************************
U32 GetInputClockFrequency()
{
  tmp = JLINK_MEM_ReadU32( CONTROL_STATUS );
  tmp = ( tmp >> 22 ) & 0x3;

  if ( tmp == 0 )
  {
    return 19;
  }
  else if( tmp == 1 )
  {
    return 24;
  }
  else if( tmp == 2 )
  {
    return 25;
  }
  else if( tmp == 3 )
  {
    return 26;
  }
  else
  {
    JLINK_SYS_MessageBox("Invalid clock configuration setting");
    return 0;
  }
}


//******************************************************************************
// CORE_PLL_Config
//   Configures the CORE PLL using steps from TRM 8.1.6.7.1
//
// CLKIN:  External clock input frequency in MHz (integer)
//     N:  PLL Divisor
//     M:  PLL Multiplier
//    M4:  PLL M4 Divisor
//    M5:  PLL M5 Divisor
//    M6:  PLL M6 Divisor
//******************************************************************************
void CORE_PLL_Config( U32 CLKIN, U32 N, U32 M, U32 M4, U32 M5, U32 M6)
{
  JLINK_SYS_Report( "Configuring CORE PLL" );

  JLINK_SYS_Report( "Going to bypass..." );
  JLINK_MEM_WriteU32( CM_CLKMODE_DPLL_CORE, ( ( clkmode & 0xFFFFFFF8) | 0x4 ) );
  while( ( JLINK_MEM_ReadU32( CM_IDLEST_DPLL_CORE ) & 0x100 ) != 0x100 ) { ; }
  JLINK_SYS_Report( "Bypassed, chaning values" );

  // Assign multiplier and divisor
  clksel &= ~0x7FFFF;
  clksel |= ( M << 0x8 ) | N;
  JLINK_MEM_WriteU32( CM_CLKSEL_DPLL_CORE, clksel );
  JLINK_MEM_WriteU32( CM_DIV_M4_DPLL_CORE, M4 );
  JLINK_MEM_WriteU32( CM_DIV_M5_DPLL_CORE, M5 );
  JLINK_MEM_WriteU32( CM_DIV_M6_DPLL_CORE, M6 );

  JLINK_SYS_Report( "Locking CORE PLL" );
  JLINK_MEM_WriteU32( CM_CLKMODE_DPLL_CORE, ( ( clkmode & 0xFFFFFFF8 ) | 0x7 ) );
  while( ( JLINK_MEM_ReadU32( CM_IDLEST_DPLL_CORE ) & 0x1 ) != 0x1 ) { ; }
  JLINK_SYS_Report( "Locked!" );
}


//******************************************************************************
// PER_PLL_Config
//   Configures the PER PLL using steps from TRM 8.1.6.8.1
//
// CLKIN:  External clock input frequency in MHz (integer)
//     N:  PLL Divisor
//     M:  PLL Multiplier
//    M2:  PLL M2 Divisor
//******************************************************************************
void PER_PLL_Config( U32 CLKIN, U32 N, U32 M, U32 M2)
{
  JLINK_SYS_Report( "Configuring PER PLL" );

  clkmode = JLINK_MEM_ReadU32( CM_CLKMODE_DPLL_PER );
  clksel  = JLINK_MEM_ReadU32( CM_CLKSEL_DPLL_PER );
  div_m2  = JLINK_MEM_ReadU32( CM_DIV_M2_DPLL_PER );

  JLINK_SYS_Report( "Going to bypass..." );
  JLINK_MEM_WriteU32( CM_CLKMODE_DPLL_PER, ( ( clkmode & 0xFFFFFFF8) | 0x4 ) );
  while( ( JLINK_MEM_ReadU32( CM_IDLEST_DPLL_PER ) & 0x100 ) != 0x100 ) { ; }
  JLINK_SYS_Report( "Bypassed, chaning values" );

  // Assign multiplier and divisor
  clksel &= ~0xFF0FFFFF;
  clksel |= 0x04000000;
  clksel |= ( M << 0x8 ) | N;
  JLINK_MEM_WriteU32( CM_CLKSEL_DPLL_PER, clksel );

  JLINK_MEM_WriteU32( CM_DIV_M2_DPLL_PER, ( M2 | 0xFFFFFF80 ) );


  JLINK_SYS_Report( "Locking PER PLL" );
  JLINK_MEM_WriteU32( CM_CLKMODE_DPLL_PER, ( ( clkmode & 0xFFFFFFF8 ) | 0x7 ) );
  while( ( JLINK_MEM_ReadU32( CM_IDLEST_DPLL_PER ) & 0x1 ) != 0x1 ) { ; }
  JLINK_SYS_Report( "Locked!" );
}


//******************************************************************************
// MPU_PLL_Config
//   Configures the MPU PLL using steps from TRM 8.1.6.9.1
//
// CLKIN:  External clock input frequency in MHz (integer)
//     N:  PLL Divisor
//     M:  PLL Multiplier
//    M2:  PLL M2 Divisor
//******************************************************************************
void MPU_PLL_Config( U32 CLKIN, U32 N, U32 M, U32 M2)
{
  clkmode = JLINK_MEM_ReadU32( CM_CLKMODE_DPLL_MPU );
  clksel  = JLINK_MEM_ReadU32( CM_CLKSEL_DPLL_MPU );
  div_m2  = JLINK_MEM_ReadU32( CM_DIV_M2_DPLL_MPU );


  JLINK_SYS_Report( "Going to bypass..." );
  JLINK_MEM_WriteU32( CM_CLKMODE_DPLL_MPU, ( ( clkmode & 0xFFFFFFF8) | 0x4 ) );
  while( ( JLINK_MEM_ReadU32( CM_IDLEST_DPLL_MPU ) & 0x100 ) != 0x100 ) { ; }
  JLINK_SYS_Report( "Bypassed, chaning values" );


  // Assign multiplier and divisor
  clksel &= ~0x7FFFF;
  clksel |= ( M << 0x8 ) | N;
  JLINK_MEM_WriteU32( CM_CLKSEL_DPLL_MPU, clksel );

  JLINK_MEM_WriteU32( CM_DIV_M2_DPLL_MPU, ( M2 | 0xFFFFFF80 ) );

  JLINK_SYS_Report( "Locking MPU PLL" );
  JLINK_MEM_WriteU32( CM_CLKMODE_DPLL_MPU, ( ( clkmode & 0xFFFFFFF8 ) | 0x7 ) );
  while( ( JLINK_MEM_ReadU32( CM_IDLEST_DPLL_MPU ) & 0x1 ) != 0x1 ) { ; }
  JLINK_SYS_Report( "Locked!" );
}


//******************************************************************************
// DISP_PLL_Config
//   Configures the DISP PLL using steps from TRM 8.1.6.10.1
//
// CLKIN:  External clock input frequency in MHz (integer)
//     N:  PLL Divisor
//     M:  PLL Multiplier
//    M2:  PLL M2 Divisor
//******************************************************************************
void DISP_PLL_Config( U32 CLKIN, U32 N, U32 M, U32 M2)
{
  clkmode = JLINK_MEM_ReadU32( CM_CLKMODE_DPLL_DISP );
  clksel  = JLINK_MEM_ReadU32( CM_CLKSEL_DPLL_DISP );
  div_m2  = JLINK_MEM_ReadU32( CM_DIV_M2_DPLL_DISP );


  JLINK_SYS_Report( "Going to bypass..." );
  JLINK_MEM_WriteU32( CM_CLKMODE_DPLL_DISP, ( ( clkmode & 0xFFFFFFF8) | 0x4 ) );
  while( ( JLINK_MEM_ReadU32( CM_IDLEST_DPLL_DISP ) & 0x100 ) != 0x100 ) { ; }
  JLINK_SYS_Report( "Bypassed, chaning values" );


  // Assign multiplier and divisor
  clksel &= ~0x7FFFF;
  clksel |= ( M << 0x8 ) | N;
  JLINK_MEM_WriteU32( CM_CLKSEL_DPLL_DISP, clksel );

  JLINK_MEM_WriteU32( CM_DIV_M2_DPLL_DISP, ( M2 | 0xFFFFFF80 ) );

  JLINK_SYS_Report( "Locking DISP PLL" );
  JLINK_MEM_WriteU32( CM_CLKMODE_DPLL_DISP, ( ( clkmode & 0xFFFFFFF8 ) | 0x7 ) );
  while( ( JLINK_MEM_ReadU32( CM_IDLEST_DPLL_DISP ) & 0x1 ) != 0x1 ) { ; }
  JLINK_SYS_Report( "Locked!" );
}


//******************************************************************************
// DDR_PLL_Config
//   Configures the DDR PLL using steps from TRM 8.1.6.11.1
//
// CLKIN:  External clock input frequency in MHz (integer)
//     N:  PLL Divisor
//     M:  PLL Multiplier
//    M2:  PLL M2 Divisor
//******************************************************************************
void DDR_PLL_Config( U32 CLKIN, U32 N, U32 M, U32 M2)
{
  clkmode = JLINK_MEM_ReadU32( CM_CLKMODE_DPLL_DDR );
  clksel  = JLINK_MEM_ReadU32( CM_CLKSEL_DPLL_DDR );
  div_m2  = JLINK_MEM_ReadU32( CM_DIV_M2_DPLL_DDR );


  JLINK_SYS_Report( "Going to bypass..." );
  JLINK_MEM_WriteU32( CM_CLKMODE_DPLL_DDR, ( ( clkmode & 0xFFFFFFF8) | 0x4 ) );
  while( ( JLINK_MEM_ReadU32( CM_IDLEST_DPLL_DDR ) & 0x100 ) != 0x100 ) { ; }
  JLINK_SYS_Report( "Bypassed, chaning values" );


  // Assign multiplier and divisor
  clksel &= ~0x7FFFF;
  clksel |= ( M << 0x8 ) | N;
  JLINK_MEM_WriteU32( CM_CLKSEL_DPLL_DDR, clksel );

  JLINK_MEM_WriteU32( CM_DIV_M2_DPLL_DDR, ( M2 | 0xFFFFFF80 ) );

  JLINK_SYS_Report( "Locking DDR PLL" );
  JLINK_MEM_WriteU32( CM_CLKMODE_DPLL_DDR, ( ( clkmode & 0xFFFFFFF8 ) | 0x7 ) );
  while( ( JLINK_MEM_ReadU32( CM_IDLEST_DPLL_DDR ) & 0x1 ) != 0x1 ) { ; }
  JLINK_SYS_Report( "Locked!" );
}


//******************************************************************************
// EMIF_PRCM_CLK_ENABLE
//   Turns on the EMIF clock
//
//******************************************************************************
void EMIF_PRCM_CLK_ENABLE()
{
  JLINK_SYS_Report( "EMIF PRCM is in progress" );
  JLINK_MEM_WriteU32( CM_PER_EMIF_CLKCTRL, 0x02 );
  while( ( JLINK_MEM_ReadU32( CM_PER_EMIF_CLKCTRL ) & 0x02 ) != 0x02 ) { ; }
  JLINK_SYS_Report( "EMIF PRCM done" );
}


//******************************************************************************
// VTP_Enable
//   DDR VTP enable
//
//******************************************************************************
void VTP_Enable()
{
  // Clear the register
  JLINK_MEM_WriteU32( VTP_CTRL_REG, 0x0 );

  // Set the filter bits
  JLINK_MEM_WriteU32( VTP_CTRL_REG, 0x6 );

  // Write 1 to enable VTP
  JLINK_MEM_WriteU32( VTP_CTRL_REG, ( JLINK_MEM_ReadU32( VTP_CTRL_REG ) | 0x40 ) );

  // Write 0 to clrz bit
  JLINK_MEM_WriteU32( VTP_CTRL_REG, ( JLINK_MEM_ReadU32( VTP_CTRL_REG ) & 0xFFFFFFFE ) );

  // Write 1 to clrz bit
  JLINK_MEM_WriteU32( VTP_CTRL_REG, ( JLINK_MEM_ReadU32( VTP_CTRL_REG ) | 0x1 ) );

  // Check the ready bit
  JLINK_SYS_Report( "Waiting for VTP ready" );
  while( ( JLINK_MEM_ReadU32( VTP_CTRL_REG ) & 0x20 ) != 0x20 ) { ; }
  JLINK_SYS_Report( "VTP ready!" );
}


//******************************************************************************
// PHY_Config_CMD
//   Configures DDR command registers
//
//******************************************************************************
void PHY_Config_CMD()
{
  i = 0;
  while( i < 3 )
  {
    JLINK_MEM_WriteU32( ( CMD0_REG_PHY_CTRL_SLAVE_RATIO_0 + ( i * 0x34 ) ), CMD_PHY_CTRL_SLAVE_RATIO );
    JLINK_MEM_WriteU32( ( CMD0_REG_PHY_INVERT_CLKOUT_0    + ( i * 0x34 ) ), CMD_PHY_INVERT_CLKOUT );
    i += 1;
  }
}


//******************************************************************************
// PHY_Config_DATA
//   Configures DDR data registers
//
//******************************************************************************
void PHY_Config_DATA()
{
  i = 0;
  while( i < 2 )
  {
    JLINK_MEM_WriteU32( ( DATA0_REG_PHY_RD_DQS_SLAVE_RATIO_0  + ( i * 0xA4 ) ), DATA_PHY_RD_DQS_SLAVE_RATIO );
    JLINK_MEM_WriteU32( ( DATA0_REG_PHY_WR_DQS_SLAVE_RATIO_0  + ( i * 0xA4 ) ), DATA_PHY_WR_DQS_SLAVE_RATIO );
    JLINK_MEM_WriteU32( ( DATA0_REG_PHY_FIFO_WE_SLAVE_RATIO_0 + ( i * 0xA4 ) ), DATA_PHY_FIFO_WE_SLAVE_RATIO );
    JLINK_MEM_WriteU32( ( DATA0_REG_PHY_WR_DATA_SLAVE_RATIO_0 + ( i * 0xA4 ) ), DATA_PHY_WR_DATA_SLAVE_RATIO );
    i += 1;
  }
}


//******************************************************************************
// DDR3_EMIF_Config
//   Configures the DDR external memory interface controller
//
//******************************************************************************
void DDR3_EMIF_Config()
{
  EMIF_PRCM_CLK_ENABLE();
  VTP_Enable();
  PHY_Config_CMD();
  PHY_Config_DATA();

  JLINK_MEM_WriteU32( DDR_CMD0_IOCTRL, DDR_IOCTRL_VALUE );
  JLINK_MEM_WriteU32( DDR_CMD1_IOCTRL, DDR_IOCTRL_VALUE );
  JLINK_MEM_WriteU32( DDR_CMD2_IOCTRL, DDR_IOCTRL_VALUE );
  JLINK_MEM_WriteU32( DDR_DATA0_IOCTRL, DDR_IOCTRL_VALUE );
  JLINK_MEM_WriteU32( DDR_DATA1_IOCTRL, DDR_IOCTRL_VALUE );

  // IO to work for DDR3
  JLINK_MEM_WriteU32( DDR_IO_CTRL, ( JLINK_MEM_ReadU32( DDR_IO_CTRL ) & ~0x1 ) );

  // CKE controlled by EMIF/DDR_PHY
  JLINK_MEM_WriteU32( DDR_CKE_CTRL, ( JLINK_MEM_ReadU32( DDR_CKE_CTRL ) | 0x1 ) );

  // Conifgure the timing register
  JLINK_MEM_WriteU32( EMIF_DDR_PHY_CTRL_1_REG       , ALLOPP_DDR3_READ_LATENCY );
  JLINK_MEM_WriteU32( EMIF_DDR_PHY_CTRL_1_SHDW_REG  , ALLOPP_DDR3_READ_LATENCY );
  JLINK_MEM_WriteU32( EMIF_DDR_PHY_CTRL_2_REG       , ALLOPP_DDR3_READ_LATENCY );
  JLINK_MEM_WriteU32( EMIF_SDRAM_TIM_1_REG          , ALLOPP_DDR3_SDRAM_TIMING1 );
  JLINK_MEM_WriteU32( EMIF_SDRAM_TIM_1_SHDW_REG     , ALLOPP_DDR3_SDRAM_TIMING1 );
  JLINK_MEM_WriteU32( EMIF_SDRAM_TIM_2_REG          , ALLOPP_DDR3_SDRAM_TIMING2 );
  JLINK_MEM_WriteU32( EMIF_SDRAM_TIM_2_SHDW_REG     , ALLOPP_DDR3_SDRAM_TIMING2 );
  JLINK_MEM_WriteU32( EMIF_SDRAM_TIM_3_REG          , ALLOPP_DDR3_SDRAM_TIMING3 );
  JLINK_MEM_WriteU32( EMIF_SDRAM_TIM_3_SHDW_REG     , ALLOPP_DDR3_SDRAM_TIMING3 );
  JLINK_MEM_WriteU32( EMIF_SDRAM_REF_CTRL_REG       , ALLOPP_DDR3_REF_CTRL );
  JLINK_MEM_WriteU32( EMIF_SDRAM_REF_CTRL_SHDW_REG  , ALLOPP_DDR3_REF_CTRL );
  JLINK_MEM_WriteU32( EMIF_ZQ_CONFIG_REG            , ALLOPP_DDR3_ZQ_CONFIG );
  JLINK_MEM_WriteU32( EMIF_SDRAM_CONFIG_REG         , ALLOPP_DDR3_SDRAM_CONFIG );

  // Wait for PHY to be ready
  while( ( JLINK_MEM_ReadU32( EMIF_STATUS_REG ) & 0x4 ) != 0x4 ) { ; }
  JLINK_SYS_Report( "PHY is ready!" );
}


//******************************************************************************
// ARM_OPPP100_Config
//   Configures the processor PLLs to run in OPP100 mode.
//
//******************************************************************************
void ARM_OPP100_Config()
{
  clk_in_mhz = GetInputClockFrequency();

  if( clk_in_mhz == 24 )
  {
    MPU_PLL_Config( clk_in_mhz, 0, 25, 1 );
    CORE_PLL_Config( clk_in_mhz, 2, 125, 10, 8, 4 );
    DDR_PLL_Config( clk_in_mhz, 2, 50, 1 );
    PER_PLL_Config( clk_in_mhz, 9, 400, 5 );
    DISP_PLL_Config( clk_in_mhz, 0, 2, 1 );
  }
  else
  {
    JLINK_SYS_MessageBox( "Expected 24MHz clock for OPP100 configuration" );
  }
}


//#################################################################################################
//                              JLINK SCRIPT DLL API INJECTIONS
//#################################################################################################
int SetupTarget(void)
{
  ARM_OPP100_Config();
  DDR3_EMIF_Config();

  return 0;
}

int AfterResetTarget(void)
{
  DisableWatchdog();
  return 0;
}
