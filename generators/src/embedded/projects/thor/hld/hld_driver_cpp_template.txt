/* C++ Includes */
#include <cstring>

/* Aurora Includes */
#include <Aurora/constants>

/* Chimera Includes */
#include <Chimera/common>
#include <Chimera/{driver_name_lower}>
#include <Chimera/utility>

/* Thor Includes */
#include <Thor/cfg>
#include <Thor/{driver_name_lower}>
#include <Thor/lld/interface/{driver_name_lower}/{driver_name_lower}_intf.hpp>
#include <Thor/lld/interface/{driver_name_lower}/{driver_name_lower}_detail.hpp>

#if defined( THOR_{driver_name_upper} )

namespace Thor::{driver_name_upper}
{{
  /*-------------------------------------------------------------------------------
  Aliases
  -------------------------------------------------------------------------------*/
  namespace HLD = ::Thor::{driver_name_upper};
  namespace LLD = ::Thor::LLD::{driver_name_upper};

  /*-------------------------------------------------------------------------------
  Constants
  -------------------------------------------------------------------------------*/
  static constexpr size_t NUM_DRIVERS = LLD::NUM_{driver_name_upper}_PERIPHS;

  /*-------------------------------------------------------------------------------
  Variables
  -------------------------------------------------------------------------------*/
  static size_t s_driver_initialized;                /**< Tracks the module level initialization state */
  static HLD::Driver hld_driver[ NUM_DRIVERS ];      /**< Driver objects */
  static HLD::Driver_rPtr hld_shared[ NUM_DRIVERS ]; /**< Shared references to driver objects */


  /*-------------------------------------------------------------------------------
  Public Functions
  -------------------------------------------------------------------------------*/
  Chimera::Status_t initialize()
  {{
    /*------------------------------------------------
    Prevent re-initialization from occurring
    ------------------------------------------------*/
    auto result = Chimera::Status::OK;
    if ( s_driver_initialized == Chimera::DRIVER_INITIALIZED_KEY )
    {{
      return result;
    }}

    /*------------------------------------------------
    Initialize local memory
    ------------------------------------------------*/
    s_driver_initialized = ~Chimera::DRIVER_INITIALIZED_KEY;
    for ( size_t x = 0; x < NUM_DRIVERS; x++ )
    {{
#if defined( THOR_TEST ) || defined( THOR_HLD_TEST_{driver_name_upper} )
      hld_shared[ x ] = HLD::Driver_rPtr( new HLD::Driver() );
#else
      hld_shared[ x ] = HLD::Driver_rPtr( &hld_driver[ x ] );
#endif
    }}

    /*------------------------------------------------
    Initialize the low level driver
    ------------------------------------------------*/
    result = Thor::LLD::{driver_name_upper}::initialize();

    s_driver_initialized = Chimera::DRIVER_INITIALIZED_KEY;
    return result;
  }}


  Chimera::Status_t reset()
  {{
    /*------------------------------------------------
    Only allow clearing of local data during testing
    ------------------------------------------------*/
#if defined( THOR_TEST ) || defined( THOR_HLD_TEST_{driver_name_upper} )
    s_driver_initialized = ~Chimera::DRIVER_INITIALIZED_KEY;

    for ( auto x = 0; x < NUM_DRIVERS; x++ )
    {{
      hld_shared[ x ].reset();
    }}
#endif

    return Chimera::Status::OK;
  }}


  Driver_rPtr getDriver( const Chimera::{driver_name_upper}::Channel ch )
  {{
    if ( auto idx = LLD::getResourceIndex( ch ); idx != ::Thor::LLD::INVALID_RESOURCE_INDEX )
    {{
      return &hld_driver[ idx ];
    }}
    else
    {{
      return nullptr;
    }}
  }}


  /*-------------------------------------------------------------------------------
  Driver Implementation
  -------------------------------------------------------------------------------*/
  Driver::Driver() : mChannel( Chimera::{driver_name_upper}::Channel::UNKNOWN )
  {{
  }}


  Driver::~Driver()
  {{
  }}

}}    // namespace Thor::{driver_name_upper}

#endif /* THOR_HLD_{driver_name_upper} */
