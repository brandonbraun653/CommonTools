#pragma once
#ifndef THOR_HLD_{driver_name_upper}_HPP
#define THOR_HLD_{driver_name_upper}_HPP

/* C++ Includes */
#include <cstdint>
#include <cstdlib>

/* Chimera Includes */
#include <Chimera/common>
#include <Chimera/{driver_name_lower}>
#include <Chimera/thread>

/* Thor Includes */
#include <Thor/hld/{driver_name_lower}/hld_{driver_name_lower}_types.hpp>

namespace Thor::{driver_name_upper}
{{
  /*-------------------------------------------------------------------------------
  Public Functions
  -------------------------------------------------------------------------------*/
  Chimera::Status_t initialize();
  Chimera::Status_t reset();
  Driver_rPtr getDriver( const Chimera::{driver_name_upper}::Channel ch );

  /*-------------------------------------------------------------------------------
  Classes
  -------------------------------------------------------------------------------*/
  /**
   *  {driver_name_upper} Peripheral Driver
   *  Methods here at a minimum implement the interface specified in Chimera.
   *  Inheritance is avoided to minimize cost of virtual function lookup table.
   */
  class Driver : public Chimera::Threading::Lockable
  {{
  public:
    Driver();
    ~Driver();

    /*-------------------------------------------------
    Interface: Hardware
    -------------------------------------------------*/
  private:
    Chimera::{driver_name_upper}::Channel mChannel;
  }};
}}    // namespace Thor::{driver_name_upper}

#endif /* THOR_HLD_{driver_name_upper}_HPP */
