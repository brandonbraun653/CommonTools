/* Chimera Includes */
#include <Chimera/common>
#include <Chimera/{driver_name_lower}>

/* Thor Includes */
#include <Thor/cfg>
#include <Thor/{driver_name_lower}>
#include <Thor/lld/common/types.hpp>
#include <Thor/lld/interface/{driver_name_lower}/{driver_name_lower}_intf.hpp>
#include <Thor/lld/interface/{driver_name_lower}/{driver_name_lower}_detail.hpp>
#include <Thor/lld/interface/{driver_name_lower}/{driver_name_lower}_prv_data.hpp>

/*-------------------------------------------------------------------------------
Aliases
-------------------------------------------------------------------------------*/
namespace HLD = ::Thor::{driver_name_upper};
namespace LLD = ::Thor::LLD::{driver_name_upper};

/*-------------------------------------------------------------------------------
Constants
-------------------------------------------------------------------------------*/
static constexpr size_t NUM_DRIVERS = ::LLD::NUM_{driver_name_upper}_PERIPHS;

/*-------------------------------------------------------------------------------
Variables
-------------------------------------------------------------------------------*/
static Chimera::{driver_name_upper}::Driver s_raw_driver[ NUM_DRIVERS ];
static Chimera::{driver_name_upper}::Driver_rPtr s_shared_driver[ NUM_DRIVERS ];


namespace Chimera::{driver_name_upper}::Backend
{{
  /*-------------------------------------------------------------------------------
  Public Functions
  -------------------------------------------------------------------------------*/
  Chimera::Status_t initialize()
  {{
    for ( size_t x = 0; x < NUM_DRIVERS; x++ )
    {{
      s_shared_driver[ x ] = Chimera::{driver_name_upper}::Driver_rPtr( &s_raw_driver[ x ] );
    }}

    return Thor::{driver_name_upper}::initialize();
  }}


  Chimera::Status_t reset()
  {{
    return Thor::{driver_name_upper}::reset();
  }}


  Chimera::{driver_name_upper}::Driver_rPtr getDriver( const Channel ch )
  {{
    auto idx = ::LLD::getResourceIndex( ch );
    return s_shared_driver[ idx ];
  }}


  Chimera::Status_t registerDriver( Chimera::{driver_name_upper}::Backend::DriverConfig &registry )
  {{
#if defined( THOR_HLD_{driver_name_upper} )
    registry.isSupported = true;
    registry.getDriver   = getDriver;
    registry.initialize  = initialize;
    registry.reset       = reset;
    return Chimera::Status::OK;
#else
    memset( &registry, 0, sizeof( Chimera::{driver_name_upper}::Backend::DriverConfig ) );
    registry.isSupported = false;
    return Chimera::Status::NOT_SUPPORTED;
#endif    // THOR_HLD_{driver_name_upper}
  }}
}}    // namespace Chimera::{driver_name_upper}::Backend


namespace Chimera::{driver_name_upper}
{{
  /*-------------------------------------------------------------------------------
  Driver Implementation
  -------------------------------------------------------------------------------*/
  Driver::Driver() : mDriver( nullptr )
  {{
  }}


  Driver::~Driver()
  {{
  }}


  /*-------------------------------------------------
  Interface: Hardware
  -------------------------------------------------*/


  /*-------------------------------------------------
  Interface: Lockable
  -------------------------------------------------*/
  void Driver::lock()
  {{
    static_cast<::HLD::Driver_rPtr>( mDriver )->lock();
  }}


  void Driver::lockFromISR()
  {{
    static_cast<::HLD::Driver_rPtr>( mDriver )->lockFromISR();
  }}


  bool Driver::try_lock_for( const size_t timeout )
  {{
    return static_cast<::HLD::Driver_rPtr>( mDriver )->try_lock_for( timeout );
  }}


  void Driver::unlock()
  {{
    static_cast<::HLD::Driver_rPtr>( mDriver )->unlock();
  }}


  void Driver::unlockFromISR()
  {{
    static_cast<::HLD::Driver_rPtr>( mDriver )->unlockFromISR();
  }}
}}    // namespace Chimera::{driver_name_upper}
