/* STL Includes */
#include <cstring>
#include <limits>

/* Chimera Includes */
#include <Chimera/algorithm>
#include <Chimera/common>
#include <Chimera/utility>

/* Driver Includes */
#include <Thor/cfg>
#include <Thor/hld/interrupt/hld_interrupt_definitions.hpp>
#include <Thor/lld/interface/{driver_name_lower}/{driver_name_lower}_prv_data.hpp>
#include <Thor/lld/interface/{driver_name_lower}/{driver_name_lower}_intf.hpp>
#include <Thor/lld/stm32{family_lower}x/{driver_name_lower}/hw_{driver_name_lower}_prj.hpp>
#include <Thor/lld/stm32{family_lower}x/{driver_name_lower}/hw_{driver_name_lower}_types.hpp>
#include <Thor/lld/stm32{family_lower}x/rcc/hw_rcc_driver.hpp>

#if defined( TARGET_STM32{family_upper} ) && defined( THOR_{driver_name_upper} )

namespace Thor::LLD::{driver_name_upper}
{{
  /*---------------------------------------------------------------------------
  Variables
  ---------------------------------------------------------------------------*/
  static Driver s_{driver_name_lower}_drivers[ NUM_{driver_name_upper}_PERIPHS ];

  /*---------------------------------------------------------------------------
  Private Functions
  ---------------------------------------------------------------------------*/

  /*---------------------------------------------------------------------------
  Public Functions
  ---------------------------------------------------------------------------*/
  Chimera::Status_t initialize()
  {{
    /*-------------------------------------------------
    Attach all the expected peripherals to the drivers
    -------------------------------------------------*/
    if ( attachDriverInstances( s_{driver_name_lower}_drivers, ARRAY_COUNT( s_{driver_name_lower}_drivers ) ) )
    {{
      return Chimera::Status::OK;
    }}
    else
    {{
      return Chimera::Status::FAIL;
    }}
  }}


  Driver_rPtr getDriver( const Chimera::{driver_name_upper}::Channel channel )
  {{
    if ( auto idx = getResourceIndex( channel ); idx != INVALID_RESOURCE_INDEX )
    {{
      return &s_{driver_name_lower}_drivers[ idx ];
    }}
    else
    {{
      return nullptr;
    }}
  }}


  /*---------------------------------------------------------------------------
  Low Level Driver Implementation
  ---------------------------------------------------------------------------*/
  Driver::Driver()
  {{
  }}

  Driver::~Driver()
  {{
  }}


  Chimera::Status_t Driver::attach( RegisterMap *const peripheral )
  {{
    /*------------------------------------------------
    Get peripheral descriptor settings
    ------------------------------------------------*/
    mPeriph       = peripheral;
    mResourceIndex = getResourceIndex( reinterpret_cast<std::uintptr_t>( peripheral ) );

    /*------------------------------------------------
    Handle the ISR configuration
    ------------------------------------------------*/
    Thor::LLD::INT::disableIRQ( Resource::IRQSignals[ mResourceIndex ] );
    Thor::LLD::INT::clearPendingIRQ( Resource::IRQSignals[ mResourceIndex ] );
    Thor::LLD::INT::setPriority( Resource::IRQSignals[ mResourceIndex ], Thor::Interrupt::{driver_name_upper}_IT_PREEMPT_PRIORITY, 0u );

    return Chimera::Status::OK;
  }}


  Chimera::Status_t Driver::reset()
  {{
    return Chimera::Status::OK;
  }}


  void Driver::clockEnable()
  {{
    auto rcc = Thor::LLD::RCC::getPeriphClockCtrl();
    rcc->enableClock( Chimera::Peripheral::Type::PERIPH_{driver_name_upper}, mResourceIndex );
  }}


  void Driver::clockDisable()
  {{
    auto rcc = Thor::LLD::RCC::getPeriphClockCtrl();
    rcc->disableClock( Chimera::Peripheral::Type::PERIPH_{driver_name_upper}, mResourceIndex );
  }}


  inline void Driver::enterCriticalSection()
  {{
    Thor::LLD::INT::disableIRQ( Resource::IRQSignals[ mResourceIndex ] );
  }}


  inline void Driver::exitCriticalSection()
  {{
    Thor::LLD::INT::enableIRQ( Resource::IRQSignals[ mResourceIndex ] );
  }}


  void Driver::IRQHandler()
  {{

  }}
}}    // namespace Thor::LLD::{driver_name_upper}


#if defined( STM32_{driver_name_upper}1_PERIPH_AVAILABLE )
void {driver_name_upper}1_IRQHandler()
{{
  using namespace Thor::LLD::{driver_name_upper};
  s_{driver_name_lower}_drivers[ {driver_name_upper}1_RESOURCE_INDEX ].IRQHandler();
}}
#endif

#endif /* TARGET_STM32{family_upper} && THOR_DRIVER_{driver_name_upper} */
