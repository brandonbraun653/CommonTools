#pragma once
#ifndef CHIMERA_{driver_name_upper}_HPP
#define CHIMERA_{driver_name_upper}_HPP

/* STL Includes */
#include <memory>

/* Chimera Includes */
#include <Chimera/source/drivers/peripherals/{driver_name_lower}/{driver_name_lower}_intf.hpp>
#include <Chimera/source/drivers/peripherals/{driver_name_lower}/{driver_name_lower}_types.hpp>

namespace Chimera::{driver_name_upper}
{{
  /*---------------------------------------------------------------------------
  Public Functions
  ---------------------------------------------------------------------------*/
  Chimera::Status_t initialize();
  Chimera::Status_t reset();
  Driver_rPtr getDriver( const Channel channel );


  /*---------------------------------------------------------------------------
  Classes
  ---------------------------------------------------------------------------*/
  /**
   *  Concrete class declaration that promises to implement the virtual one, to
   *  avoid paying the memory penalty of a v-table lookup. Implemented project side
   *  using the Bridge pattern.
   */
  class Driver
  {{
  public:
    Driver();
    ~Driver();

    /*-------------------------------------------------
    Interface: Hardware
    -------------------------------------------------*/

    /*-------------------------------------------------
    Interface: Lockable
    -------------------------------------------------*/
    void lock();
    void lockFromISR();
    bool try_lock_for( const size_t timeout );
    void unlock();
    void unlockFromISR();

  private:
    void * mDriver; /**< Instance of the implementer's {driver_name_upper} driver */
  }};
}}  // namespace Chimera::{driver_name_upper}

#endif  /* !CHIMERA_{driver_name_upper}_HPP */
