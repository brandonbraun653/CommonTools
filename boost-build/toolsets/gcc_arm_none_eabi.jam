# Copyright 2001 David Abrahams
# Copyright 2002-2017 Rene Rivera
# Copyright 2002-2003 Vladimir Prus
# Copyright 2005 Reece H. Dunn
# Copyright 2006 Ilya Sokolov
# Copyright 2007 Roland Schwarz
# Copyright 2007 Boris Gubenko
#
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

#| tag::doc[]

[[bbv2.reference.tools.compiler.gcc]]
= GNU C++

The `gcc` module supports the http://gcc.gnu.org[GNU C++ compiler] on
Linux, a number of Unix-like system including SunOS and on Windows
(either http://www.cygwin.com[Cygwin] or http://www.mingw.org[MinGW]).

The `gcc` module is initialized using the following syntax:

----
using gcc : [version] : [c++-compile-command] : [compiler options] ;
----

This statement may be repeated several times, if you want to configure
several versions of the compiler.

If the version is not explicitly specified, it will be automatically
detected by running the compiler with the `-v` option. If the command is
not specified, the `g++` binary will be searched in PATH.

The following options can be provided, using
_`<option-name>option-value syntax`_:

`cflags`::
Specifies additional compiler flags that will be used when compiling C
sources.

`cxxflags`::
Specifies additional compiler flags that will be used when compiling C++
sources.

`compileflags`::
Specifies additional compiler flags that will be used when compiling both C
and C++ sources.

`linkflags`::
Specifies additional command line options that will be passed to the linker.

`root`::
Specifies root directory of the compiler installation. This option is
necessary only if it is not possible to detect this information from the
compiler command--for example if the specified compiler command is a user
script.

`archiver`::
Specifies the archiver command that is used to produce static
libraries. Normally, it is autodetected using gcc `-print-prog-name`
option or defaulted to `ar`, but in some cases you might want to
override it, for example to explicitly use a system version instead of
one included with gcc.

`ranlib`::
Specifies the ranlib command that is used to generated symbol table
for static libraries. Normally, it is autodetected using gcc
`-print-prog-name` option or defaulted to `ranlib`, but in some cases
you might want to override it, for example to explicitly use a system
version instead of one included with gcc.

`rc`::
Specifies the resource compiler command that will be used with the
version of gcc that is being configured. This setting makes sense only
for Windows and only if you plan to use resource files. By default
`windres` will be used.

`rc-type`::
Specifies the type of resource compiler. The value can be either
`windres` for msvc resource compiler, or `rc` for borland's resource
compiler.

In order to compile 64-bit applications, you have to specify
`address-model=64`, and the `instruction-set` feature should refer to a 64
bit processor. Currently, those include `nocona`, `opteron`, `athlon64` and
`athlon-fx`.

|# # end::doc[]

import "class" : new ;
import common ;
import cygwin ;
import feature ;
import fortran ;
import generators ;
import os ;
import pch ;
import property ;
import property-set ;
import rc ;
import regex ;
import sequence ;
import set ;
import toolset ;
import type ;
import unix ;
import virtual-target ;
import errors ;


if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
    .debug-configuration = true ;
}


feature.extend toolset : gcc_arm_none_eabi ;

toolset.inherit-generators gcc_arm_none_eabi : unix : unix.link unix.link.dll ;
toolset.inherit-flags gcc_arm_none_eabi : unix ;
toolset.inherit-rules gcc_arm_none_eabi : unix ;

generators.override gcc_arm_none_eabi.prebuilt : builtin.prebuilt ;
generators.override gcc_arm_none_eabi.searched-lib-generator : searched-lib-generator ;

# Make gcc toolset object files use the "o" suffix on all platforms.
type.set-generated-target-suffix EXE : <toolset>gcc_arm_none_eabi <target-os>windows : elf ;
type.set-generated-target-suffix LIB : <toolset>gcc_arm_none_eabi <target-os>windows <link>static : a ;

type.set-generated-target-suffix OBJ : <toolset>gcc_arm_none_eabi : o ;
type.set-generated-target-suffix OBJ : <toolset>gcc_arm_none_eabi <target-os>windows : o ;
type.set-generated-target-suffix OBJ : <toolset>gcc_arm_none_eabi <target-os>cygwin : o ;


# Initializes the gcc toolset for the given version. If necessary, command may
# be used to specify where the compiler is located. The parameter 'options' is a
# space-delimited list of options, each one specified as
# <option-name>option-value. Valid option names are: cxxflags, linkflags and
# linker-type. Accepted linker-type values are aix, darwin, gnu, hpux, osf or
# sun and the default value will be selected based on the current OS.
# Example:
#   using gcc : 3.4 : : <cxxflags>foo <linkflags>bar <linker-type>sun ;
#
# The compiler command to use is detected in three steps:
# 1) If an explicit command is specified by the user, it will be used and must
#    be available.
# 2) If only a certain version is specified, it is enforced:
#    - either the 'g++-VERSION' command must be available
#    - or the default command 'g++' must be available and match the exact
#      version.
# 3) Without user-provided restrictions use default 'g++'.
#
rule init ( version ? : command * : options * : requirement * )
{
    #1): use user-provided command
    local tool-command = ;
    if $(command)
    {
        tool-command = [ common.get-invocation-command-nodefault gcc_arm_none_eabi : arm-none-eabi-g++ :
            $(command) ] ;
        if ! $(tool-command)
        {
            import errors ;
            errors.error toolset gcc_arm_none_eabi "initialization:"
                : provided command '$(command)' not found
                : initialized from [ errors.nearest-user-location ] ;
        }
    }
    #2): enforce user-provided version
    else if $(version)
    {
        tool-command = [ common.get-invocation-command-nodefault gcc_arm_none_eabi :
            "g++-$(version[1])" ] ;

        #2.1) fallback: check whether "g++" reports the requested version
        if ! $(tool-command)
        {
            tool-command = [ common.get-invocation-command-nodefault gcc_arm_none_eabi : arm-none-eabi-g++ ]
                ;
            if $(tool-command)
            {
                local tool-command-string = \"$(tool-command)\" ;
                tool-command-string = $(tool-command-string:J=" ") ;
                local tool-version = [ dump-full-version
                    $(tool-command-string) ] ;
                if $(tool-version) != $(version)
                {
                    # Permit a match between a two-digit version specified by the
                    # user (e.g. 4.4) and a 3-digit version reported by gcc.
                    # Since only two digits are present in the binary name
                    # anyway, insisting that user specify the 3-digit version
                    # when configuring Boost.Build, while it is not required on
                    # the command line, would be strange.
                    local stripped = [ MATCH "^([0-9]+\.[0-9]+).*" :
                        $(tool-version) ] ;
                    if $(stripped) != $(version)
                    {
                        import errors ;
                        errors.error toolset gcc_arm_none_eabi "initialization:"
                            : version '$(version)' requested but
                                'g++-$(version)' not found and version
                                '$(tool-version)' of default '$(tool-command)'
                                does not match
                            : initialized from [ errors.nearest-user-location ]
                            ;
                        tool-command = ;
                    }
                    # Use full 3-digit version to be compatible with the
                    # 'using gcc ;' case
                    version = $(tool-version) ;
                }
            }
            else
            {
                import errors ;
                errors.error toolset gcc_arm_none_eabi "initialization:"
                    : version '$(version)' requested but neither
                        'g++-$(version)' nor default 'g++' found
                    : initialized from [ errors.nearest-user-location ] ;
            }
        }
    }
    #3) default: no command and no version specified, try using "g++"
    else
    {
        tool-command = [ common.get-invocation-command-nodefault gcc_arm_none_eabi : arm-none-eabi-g++ ] ;
        if ! $(tool-command)
        {
            import errors ;
            errors.error toolset gcc_arm_none_eabi "initialization:"
                : no command provided, default command 'g++' not found
                : initialized from [ errors.nearest-user-location ] ;
        }
    }


    # Information about the gcc_arm_none_eabi command...
    #   The command.
    local command = $(tool-command) ;
    #   The 'command' variable can have multiple elements but when calling the
    # SHELL builtin we need a single string, and we need to quote elements
    # with spaces.
    local command-string = \"$(command)\" ;
    command-string = $(command-string:J=" ") ;
    #   The root directory of the tool install.
    local root = [ feature.get-values <root> : $(options) ] ;
    #   The bin directory where to find the command to execute.
    local bin ;
    #   The compiler flavor.
    local flavor = [ feature.get-values <flavor> : $(options) ] ;
    #   vxworks build on windows uses csh that is neither mingw or cygwin
    if [ feature.get-values <target-os> : $(options) ] = vxworks
    {
        flavor ?= vxworks ;
    }
    #   Autodetect the root and bin dir if not given.
    if $(command)
    {
        bin ?= [ common.get-absolute-tool-path $(command[-1]) ] ;
        root ?= $(bin:D) ;
    }
    local target-os ;
    #   Autodetect the version and flavor if not given.
    if $(command)
    {
        local machine = [ MATCH "^([^ ]+)" :
            [ SHELL "$(command-string) -dumpmachine" ] ] ;
        version ?= [ dump-full-version $(command-string) ] ;
        switch $(machine:L)
        {
            case *mingw* : flavor ?= mingw ;
            case *cygwin* : flavor ?= cygwin ;
        }
        switch $(machine:L)
        {
            case *mingw*  : target-os ?= windows ;
            case *cygwin* : target-os ?= cygwin ;
            case *linux*  : target-os ?= linux ;
            # TODO: finish this list.
        }
    }

    local condition ;
    condition = [ common.check-init-parameters gcc_arm_none_eabi $(requirement) : version $(version)
        : $(condition) ] ;

    common.handle-options gcc_arm_none_eabi : $(condition) : $(command) : $(options) ;

    # Set the default target-os for this toolset.
    if $(target-os) && ! [ feature.get-values <target-os> : $(requirement) ]
    {
        local conditionx = [ regex.replace $(condition) "/" "," ] ;
        toolset.add-defaults $(conditionx)\:<target-os>$(target-os) ;
    }

    # If gcc_arm_none_eabi is installed in a non-standard location, we would need to add
    # LD_LIBRARY_PATH when running programs created with it (for unit-test/run
    # rules).
    if $(command)
    {
        # On multilib 64-bit boxes, there are both 32-bit and 64-bit libraries
        # and all must be added to LD_LIBRARY_PATH. The linker will pick the
        # right onces. Note that we do not provide a clean way to build a 32-bit
        # binary using a 64-bit compiler, but user can always pass -m32
        # manually.
        local lib_path = $(root)/bin $(root)/lib $(root)/lib32 $(root)/lib64 ;
        if $(.debug-configuration)
        {
            ECHO "notice:" using gcc_arm_none_eabi libraries "::" $(condition) "::" $(lib_path) ;
        }
        toolset.flags gcc_arm_none_eabi.link RUN_PATH $(condition) : $(lib_path) ;
    }

    # If we are not using a system gcc installation we should adjust the various
    # programs as needed to prefer using their installation specific versions.
    # This is essential for correct use of MinGW and for cross-compiling.

    # - Archive builder.
    local archiver = [ common.get-invocation-command gcc_arm_none_eabi
        : [ .get-prog-name $(command-string) : ar : $(flavor) ]
        : [ feature.get-values <archiver> : $(options) ]
        : $(bin)
        : search-path ] ;
    toolset.flags gcc_arm_none_eabi.archive .AR $(condition) : $(archiver[1]) ;
    if $(.debug-configuration)
    {
        ECHO "notice:" using gcc_arm_none_eabi archiver "::" $(condition) "::" $(archiver[1]) ;
    }

    # - Ranlib.
    local ranlib = [ common.get-invocation-command gcc_arm_none_eabi
        : [ .get-prog-name $(command-string) : ranlib : $(flavor) ]
        : [ feature.get-values <ranlib> : $(options) ]
        : $(bin)
        : search-path ] ;
    toolset.flags gcc_arm_none_eabi.archive .RANLIB $(condition) : $(ranlib[1]) ;
    if $(.debug-configuration)
    {
        ECHO "notice:" using gcc_arm_none_eabi ranlib "::" $(condition) "::" $(ranlib[1]) ;
    }

    # - Resource compiler.
    local rc = [ common.get-invocation-command-nodefault gcc_arm_none_eabi : windres :
        [ feature.get-values <rc> : $(options) ] : $(bin) : search-path ] ;
    local rc-type = [ feature.get-values <rc-type> : $(options) ] ;
    rc-type ?= windres ;
    if ! $(rc)
    {
        # If we can not find an RC compiler we fallback to a null one that
        # creates empty object files. This allows the same Jamfiles to work
        # across the board. The null RC uses assembler to create the empty
        # objects, so configure that.
        rc = [ common.get-invocation-command gcc_arm_none_eabi : as : : $(bin) : search-path ]
            ;
        rc-type = null ;
    }
    rc.configure $(rc) : $(condition) : <rc-type>$(rc-type) ;

    toolset.flags gcc_arm_none_eabi VERSION $(condition) : [ regex.split $(version) "[.]" ] ;

    init-cxxstd-flags $(condition) : $(version) ;
}

if [ os.name ] = NT
{
    # This causes single-line command invocation to not go through .bat files,
    # thus avoiding command-line length limitations.
    # TODO: Set JAMSHELL on specific targets instead of globally.
    JAMSHELL = % ;
}

local rule dump-full-version ( command-string )
{
    # -dumpfullversion is only supported for gcc 7+.
    # Passing both options works, as the first one that's
    # recognized will be used.
    return [ MATCH "^([0-9.]+)" :
        [ SHELL "$(command-string) -dumpfullversion -dumpversion" ] ] ;
}

# Uses -print-prog-name to get the name of the tool.
# Converts the path to native form if using cygwin.
rule .get-prog-name ( command-string : tool : flavor ? )
{
    local prog-name = [ NORMALIZE_PATH [ MATCH "(.*)[\n]+" :
        [ SHELL "$(command-string) -print-prog-name=$(tool)" ] ] ] ;

    if $(flavor) = cygwin && [ os.name ] = NT
    {
        prog-name = [ cygwin.cygwin-to-windows-path $(prog-name) ] ;
    }
    return $(prog-name) ;
}

###
### Functions that set options on the targets.
###

local all-os = [ feature.values <target-os> ] ;

local rule compile-link-flags ( * )
{
    toolset.flags gcc_arm_none_eabi.compile OPTIONS $(1) : $(2) ;
    toolset.flags gcc_arm_none_eabi.link OPTIONS $(1) : $(2) ;
}

{
    # This logic will add -fPIC for all compilations:
    #
    # lib a : a.cpp b ;
    # obj b : b.cpp ;
    # exe c : c.cpp a d ;
    # obj d : d.cpp ;
    #
    # This all is fine, except that 'd' will be compiled with -fPIC even
    # though it is not needed, as 'd' is used only in exe. However, it is
    # hard to detect where a target is going to be used. Alternatively, we
    # can set -fPIC only when main target type is LIB but than 'b' would be
    # compiled without -fPIC which would lead to link errors on x86-64. So,
    # compile everything with -fPIC.
    #
    # Yet another alternative would be to create a propagated <sharedable>
    # feature and set it when building shared libraries, but that would be
    # hard to implement and would increase the target path length even more.

    # On Windows, fPIC is the default, and specifying -fPIC explicitly leads
    # to a warning.
    local non-windows = [ set.difference $(all-os) : cygwin windows ] ;
    compile-link-flags <link>shared/<target-os>$(non-windows) : -fPIC ;
}

{
    # Handle address-model
    compile-link-flags <target-os>aix/<address-model>32 : -maix32 ;
    compile-link-flags <target-os>aix/<address-model>64 : -maix64 ;

    compile-link-flags <target-os>hpux/<address-model>32 : -milp32 ;
    compile-link-flags <target-os>hpux/<address-model>64 : -mlp64 ;

    local generic-os = [ set.difference $(all-os) : aix hpux ] ;
    local arch = power sparc x86 ;
    compile-link-flags <target-os>$(generic-os)/<architecture>$(arch)/<address-model>32 : -m32 ;
    compile-link-flags <target-os>$(generic-os)/<architecture>$(arch)/<address-model>64 : -m64 ;
}

{
    # Handle threading
    local rule threading-flags ( * )
    {
        compile-link-flags <threading>multi/$(1) : $(2) ;
        if $(3)
        {
            toolset.flags gcc_arm_none_eabi.link FINDLIBS-SA <threading>multi/$(1) : $(3) ;
        }
    }

    threading-flags <target-os>windows : -mthreads ;
    threading-flags <target-os>cygwin  : -mthreads ;
    threading-flags <target-os>solaris  : -pthreads : rt ;

    local bsd = [ MATCH ^(.*bsd)$ : $(all-os) ] ;
    threading-flags <target-os>$(bsd) : -pthread ;

    local no-threading = android beos haiku sgi darwin vxworks ;
    local threading-generic-os = [ set.difference $(all-os) : $(no-threading) $(bsd) windows cygwin solaris ] ;
    threading-flags <target-os>$(threading-generic-os) : -pthread : rt ;
}

{
    local rule cxxstd-flags ( * )
    {
        toolset.flags gcc_arm_none_eabi.compile.c++ OPTIONS $(1) : $(2) ;
        toolset.flags gcc_arm_none_eabi.link OPTIONS $(1) : $(2) ;
    }

    local cxxstd = [ feature.values <cxxstd> ] ;
    local dialects = [ feature.values <cxxstd-dialect> ] ;
    .cxxstd-dialects = [ set.difference $(dialects) : gnu iso ] ;
    # C++ latest needs to be set up on a per-toolset basis
    for local std in [ set.difference $(cxxstd) : latest ]
    {
        cxxstd-flags <cxxstd>$(std)/<cxxstd-dialect>iso : -std=c++$(std) ;
        cxxstd-flags <cxxstd>$(std)/<cxxstd-dialect>gnu : -std=gnu++$(std) ;
        # If we see this it's probably a mistake, but
        # toolset.flags has no way to set up diagnostics.
        cxxstd-flags <cxxstd>$(std)/<cxxstd-dialect>$(.cxxstd-dialects) : -std=c++$(std) ;
    }

    local rule version-ge ( lhs : rhs )
    {
        lhs = [ regex.split $(lhs) "[.]" ] ;
        rhs = [ regex.split $(rhs) "[.]" ] ;
        return [ sequence.compare $(rhs) : $(lhs) : numbers.less ] ;
    }
    # Version specific flags
    local rule init-cxxstd-flags ( condition * : version )
    {
        local std ;
        if [ version-ge $(version) : 8.0 ] { std = 2a ; }
        else if [ version-ge $(version) : 5.1 ] { std = 1z ; }
        else if [ version-ge $(version) : 4.8 ] { std = 1y ; }
        else if [ version-ge $(version) : 4.7 ] { std = 11 ; }
        else if [ version-ge $(version) : 3.3 ] { std = 98 ; }
        if $(std)
        {
            cxxstd-flags $(condition)/<cxxstd>latest/<cxxstd-dialect>iso : -std=c++$(std) ;
            cxxstd-flags $(condition)/<cxxstd>latest/<cxxstd-dialect>gnu : -std=gnu++$(std) ;
            cxxstd-flags $(condition)/<cxxstd>latest/<cxxstd-dialect>$(.cxxstd-dialects) : -std=c++$(std) ;
        }
    }
}

generators.register-c-compiler gcc_arm_none_eabi.compile.c++.preprocess : CPP : PREPROCESSED_CPP : <toolset>gcc_arm_none_eabi ;
generators.register-c-compiler gcc_arm_none_eabi.compile.c.preprocess   : C   : PREPROCESSED_C   : <toolset>gcc_arm_none_eabi ;
generators.register-c-compiler gcc_arm_none_eabi.compile.c++ : CPP : OBJ : <toolset>gcc_arm_none_eabi ;
generators.register-c-compiler gcc_arm_none_eabi.compile.c   : C   : OBJ : <toolset>gcc_arm_none_eabi ;
generators.register-c-compiler gcc_arm_none_eabi.compile.asm : ASM : OBJ : <toolset>gcc_arm_none_eabi ;

generators.register [ new fortran-compiling-generator
    gcc_arm_none_eabi.compile.fortran : FORTRAN FORTRAN90 : OBJ : <toolset>gcc_arm_none_eabi ] ;

rule compile.c++.preprocess ( targets * : sources * : properties * )
{
    # Some extensions are compiled as C++ by default. For others, we need to
    # pass -x c++. We could always pass -x c++ but distcc does not work with it.
    if ! $(>:S) in .cc .cp .cxx .cpp .c++ .C
    {
        LANG on $(<) = "-x c++" ;
    }
    DEPENDS $(<) : [ on $(<) return $(PCH_FILE) ] ;
}

rule compile.c.preprocess ( targets * : sources * : properties * )
{
    # If we use the name g++ then default file suffix -> language mapping does
    # not work. So have to pass -x option. Maybe, we can work around this by
    # allowing the user to specify both C and C++ compiler names.
    #if $(>:S) != .c
    #{
        LANG on $(<) = "-x c" ;
    #}
    DEPENDS $(<) : [ on $(<) return $(PCH_FILE) ] ;
}

rule compile.c++ ( targets * : sources * : properties * )
{
    # Some extensions are compiled as C++ by default. For others, we need to
    # pass -x c++. We could always pass -x c++ but distcc does not work with it.
    if ! $(>:S) in .cc .cp .cxx .cpp .c++ .C
    {
        LANG on $(<) = "-x c++" ;
    }
    DEPENDS $(<) : [ on $(<) return $(PCH_FILE) ] ;
}

rule compile.c ( targets * : sources * : properties * )
{
    # If we use the name g++ then default file suffix -> language mapping does
    # not work. So have to pass -x option. Maybe, we can work around this by
    # allowing the user to specify both C and C++ compiler names.
    #if $(>:S) != .c
    #{
        LANG on $(<) = "-x c" ;
    #}
    DEPENDS $(<) : [ on $(<) return $(PCH_FILE) ] ;
}

rule compile.fortran ( targets * : sources * : properties * )
{
}

actions compile.c++ bind PCH_FILE
{
    "$(CONFIG_COMMAND)" $(LANG) -ftemplate-depth-$(TEMPLATE_DEPTH) $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(PCH_FILE:D)" -I"$(INCLUDES)" -c -o "$(<:W)" "$(>:W)"
}

actions compile.c bind PCH_FILE
{
    "$(CONFIG_COMMAND)" $(LANG) $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(PCH_FILE:D)" -I"$(INCLUDES)" -c -o "$(<)" "$(>)"
}

actions compile.c++.preprocess bind PCH_FILE
{
    "$(CONFIG_COMMAND)" $(LANG) -ftemplate-depth-$(TEMPLATE_DEPTH) $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(PCH_FILE:D)" -I"$(INCLUDES)" "$(>:W)" -E >"$(<:W)"
}

actions compile.c.preprocess bind PCH_FILE
{
    "$(CONFIG_COMMAND)" $(LANG) $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(PCH_FILE:D)" -I"$(INCLUDES)" "$(>)" -E >$(<)
}

actions compile.fortran
{
    "$(CONFIG_COMMAND)" $(LANG) $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(PCH_FILE:D)" -I"$(INCLUDES)" -c -o "$(<)" "$(>)"
}

rule compile.asm ( targets * : sources * : properties * )
{
    LANG on $(<) = "-x assembler-with-cpp" ;
}

actions compile.asm
{
    "$(CONFIG_COMMAND)" $(LANG) $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -c -o "$(<)" "$(>)"
}


###
### General options, like optimization.
###

# Declare flags and action for compilation.
# toolset.flags gcc_arm_none_eabi.compile OPTIONS <optimization>off   : -O0 ;
# toolset.flags gcc_arm_none_eabi.compile OPTIONS <optimization>speed : -O3 ;
# toolset.flags gcc_arm_none_eabi.compile OPTIONS <optimization>space : -Os ;

# toolset.flags gcc_arm_none_eabi.compile OPTIONS <inlining>off  : -fno-inline ;
# toolset.flags gcc_arm_none_eabi.compile OPTIONS <inlining>on   : -Wno-inline ;
# toolset.flags gcc_arm_none_eabi.compile OPTIONS <inlining>full : -finline-functions -Wno-inline ;

toolset.flags gcc_arm_none_eabi.compile OPTIONS <warnings>off : -w ;
toolset.flags gcc_arm_none_eabi.compile OPTIONS <warnings>on  : -Wall ;
toolset.flags gcc_arm_none_eabi.compile OPTIONS <warnings>all : -Wall -pedantic ;
toolset.flags gcc_arm_none_eabi.compile OPTIONS <warnings-as-errors>on : -Werror ;

# toolset.flags gcc_arm_none_eabi.compile OPTIONS <debug-symbols>on : -g ;
# toolset.flags gcc_arm_none_eabi.compile OPTIONS <profiling>on : -pg ;

toolset.flags gcc_arm_none_eabi.compile OPTIONS <local-visibility>hidden : -fvisibility=hidden ;
toolset.flags gcc_arm_none_eabi.compile.c++ OPTIONS <local-visibility>hidden : -fvisibility-inlines-hidden ;
toolset.flags gcc_arm_none_eabi.compile OPTIONS <local-visibility>protected : -fvisibility=protected ;
toolset.flags gcc_arm_none_eabi.compile OPTIONS <local-visibility>protected/<target-os>darwin : ;
toolset.flags gcc_arm_none_eabi.compile OPTIONS <local-visibility>global : -fvisibility=default ;

toolset.flags gcc_arm_none_eabi.compile.c++ OPTIONS <rtti>off : -fno-rtti ;
toolset.flags gcc_arm_none_eabi.compile.c++ OPTIONS <exception-handling>off : -fno-exceptions ;

# configure Dinkum STL to match compiler options
toolset.flags gcc_arm_none_eabi.compile.c++ DEFINES <rtti>off/<target-os>vxworks : _NO_RTTI ;
toolset.flags gcc_arm_none_eabi.compile.c++ DEFINES <exception-handling>off/<target-os>vxworks : _NO_EX=1 ;

###
### User free feature options.
###

toolset.flags gcc_arm_none_eabi.compile USER_OPTIONS <cflags> ;
toolset.flags gcc_arm_none_eabi.compile.c++ USER_OPTIONS <cxxflags> ;
toolset.flags gcc_arm_none_eabi.compile.asm USER_OPTIONS <asmflags> ;
toolset.flags gcc_arm_none_eabi.compile DEFINES <define> ;
toolset.flags gcc_arm_none_eabi.compile INCLUDES <include> ;
toolset.flags gcc_arm_none_eabi.compile.c++ TEMPLATE_DEPTH <c++-template-depth> ;
toolset.flags gcc_arm_none_eabi.compile.fortran USER_OPTIONS <fflags> ;

###
### Linking generators and actions.
###

# Class checking that we do not try to use the <runtime-link>static property
# while creating or using a shared library, since it is not supported by
# gcc/libc.
class gcc_arm_none_eabi-linking-generator : unix-linking-generator
{
    rule run ( project name ? : property-set : sources + )
    {
        local target-os = [ $(property-set).get <target-os> ] ;
        local no-static-link = true ;
        switch $(target-os)
        {
            case vms : no-static-link = ;
            case windows : no-static-link = ;
        }

        local properties = [ $(property-set).raw ] ;
        local reason ;
        if $(no-static-link) && <runtime-link>static in $(properties)
        {
            if <link>shared in $(properties)
            {
                reason = On gcc_arm_none_eabi, DLLs can not be built with
                    '<runtime-link>static'. ;
            }
            else if [ type.is-derived $(self.target-types[1]) EXE ]
            {
                for local s in $(sources)
                {
                    local type = [ $(s).type ] ;
                    if $(type) && [ type.is-derived $(type) SHARED_LIB ]
                    {
                        reason = On gcc_arm_none_eabi, using DLLs together with the
                            '<runtime-link>static' option is not possible. ;
                    }
                }
            }
        }
        if $(reason)
        {
            ECHO "warning:" $(reason) ;
            ECHO "warning:" It is suggested to use '<runtime-link>static' together
                with '<link>static'. ;
        }
        else
        {
            return [ unix-linking-generator.run $(project) $(name) :
                $(property-set) : $(sources) ] ;
        }
    }
}

generators.register
  [ new gcc_arm_none_eabi-linking-generator gcc_arm_none_eabi.link
      : LIB OBJ
      : EXE
      : <toolset>gcc_arm_none_eabi ] ;

generators.register
  [ new gcc_arm_none_eabi-linking-generator gcc_arm_none_eabi.link.dll
      : LIB OBJ
      : SHARED_LIB
      : <toolset>gcc_arm_none_eabi ] ;

# Declare flags for linking.
# First, the common flags.
# toolset.flags gcc_arm_none_eabi.link OPTIONS <debug-symbols>on : -g ;
# toolset.flags gcc_arm_none_eabi.link OPTIONS <profiling>on : -pg ;
toolset.flags gcc_arm_none_eabi.link USER_OPTIONS <linkflags> ;
toolset.flags gcc_arm_none_eabi.link LINKPATH <library-path> ;
toolset.flags gcc_arm_none_eabi.link FINDLIBS-ST <find-static-library> ;
toolset.flags gcc_arm_none_eabi.link FINDLIBS-SA <find-shared-library> ;
toolset.flags gcc_arm_none_eabi.link LIBRARIES <library-file> ;

# Enclose the RPATH variable on 'targets' in double quotes, unless it is already
# enclosed in single quotes. This special casing is done because it is common to
# pass '$ORIGIN' to linker -- and it has to have single quotes to prevent shell
# expansion -- and if we add double quotes then the preventing properties of
# single quotes disappear.
#
rule quote-rpath ( targets * )
{
    local r = [ on $(targets[1]) return $(RPATH) ] ;
    if ! [ MATCH ('.*') : $(r) ]
    {
        r = \"$(r)\" ;
    }
    RPATH on $(targets) = $(r) ;
}

# Declare actions for linking.
rule link ( targets * : sources * : properties * )
{
    SPACE on $(targets) = " " ;
    # Serialize execution of the 'link' action, since running N links in
    # parallel is just slower. For now, serialize only gcc links, it might be a
    # good idea to serialize all links.
    JAM_SEMAPHORE on $(targets) = <s>gcc_arm_none_eabi-link-semaphore ;
    quote-rpath $(targets) ;
}

actions link bind LIBRARIES
{
    "$(CONFIG_COMMAND)" -L"$(LINKPATH)" -Wl,$(RPATH_OPTION:E=-R)$(SPACE)-Wl,$(RPATH) -Wl,-rpath-link$(SPACE)-Wl,"$(RPATH_LINK)" -o "$(<)" -Wl,--start-group -Wl,--whole-archive "$(>)" "$(LIBRARIES)" $(FINDLIBS-ST-PFX) -l$(FINDLIBS-ST) $(FINDLIBS-SA-PFX) -l$(FINDLIBS-SA) -Wl,--no-whole-archive -Wl,--end-group $(OPTIONS) $(USER_OPTIONS)
}

rule link.dll ( targets * : sources * : properties * )
{
    SPACE on $(targets) = " " ;
    JAM_SEMAPHORE on $(targets) = <s>gcc_arm_none_eabi-link-semaphore ;
    quote-rpath $(targets) ;
}

# Differs from 'link' above only by -shared.
actions link.dll bind LIBRARIES
{
    "$(CONFIG_COMMAND)" -L"$(LINKPATH)" -Wl,$(RPATH_OPTION:E=-R)$(SPACE)-Wl,$(RPATH) "$(.IMPLIB-COMMAND)$(<[1])" -o "$(<[-1])" $(HAVE_SONAME)-Wl,$(SONAME_OPTION)$(SPACE)-Wl,$(<[-1]:D=) -shared $(START-GROUP) "$(>)" "$(LIBRARIES)" $(FINDLIBS-ST-PFX) -l$(FINDLIBS-ST) $(FINDLIBS-SA-PFX) -l$(FINDLIBS-SA) $(END-GROUP) $(OPTIONS) $(USER_OPTIONS)
}

###
### Archive library generation.
###

# Default value. Mostly for the sake of intel-linux that inherits from gcc, but
# does not have the same logic to set the .AR variable. We can put the same
# logic in intel-linux, but that is hardly worth the trouble as on Linux, 'ar'
# is always available.
.AR = ar ;
.RANLIB = ranlib ;

toolset.flags gcc_arm_none_eabi.archive AROPTIONS <archiveflags> ;

rule archive ( targets * : sources * : properties * )
{
    # Always remove archive and start again. Here is the rationale from
    #
    # Andre Hentz:
    #
    # I had a file, say a1.c, that was included into liba.a. I moved a1.c to
    # a2.c, updated my Jamfiles and rebuilt. My program was crashing with absurd
    # errors. After some debugging I traced it back to the fact that a1.o was
    # *still* in liba.a
    #
    # Rene Rivera:
    #
    # Originally removing the archive was done by splicing an RM onto the
    # archive action. That makes archives fail to build on NT when they have
    # many files because it will no longer execute the action directly and blow
    # the line length limit. Instead we remove the file in a different action,
    # just before building the archive.
    #
    local clean.a = $(targets[1])(clean) ;
    TEMPORARY $(clean.a) ;
    NOCARE $(clean.a) ;
    LOCATE on $(clean.a) = [ on $(targets[1]) return $(LOCATE) ] ;
    DEPENDS $(clean.a) : $(sources) ;
    DEPENDS $(targets) : $(clean.a) ;
    common.RmTemps $(clean.a) : $(targets) ;
}

# Declare action for creating static libraries.
# The letter 'r' means to add files to the archive with replacement. Since we
# remove archive, we do not care about replacement, but there is no option "add
# without replacement".
# The letter 'c' suppresses the warning in case the archive does not exists yet.
# That warning is produced only on some platforms, for whatever reasons.
#
actions piecemeal archive
{
    "$(.AR)" $(AROPTIONS) rc "$(<)" "$(>)"
    "$(.RANLIB)" "$(<)"
}

###
### CPU architecture and instruction set options.
###

local rule cpu-flags ( toolset variable : architecture : instruction-set + :
    values + : default ? )
{
    if $(default)
    {
        toolset.flags $(toolset) $(variable)
            <architecture>$(architecture)/<instruction-set> : $(values) ;
    }
    toolset.flags $(toolset) $(variable)
        <architecture>/<instruction-set>$(instruction-set)
        <architecture>$(architecture)/<instruction-set>$(instruction-set)
        : $(values) ;
}


# Set architecture/instruction-set options.
#
# x86 and compatible
# The 'native' option appeared in gcc 4.2 so we cannot safely use it as default.
# Use i686 instead for 32-bit.
toolset.flags gcc_arm_none_eabi OPTIONS <architecture>x86/<address-model>32/<instruction-set> : -march=i686 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : native : -march=native ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : i486 : -march=i486 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : i586 : -march=i586 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : i686 : -march=i686 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : pentium : -march=pentium ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : pentium-mmx : -march=pentium-mmx ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : pentiumpro : -march=pentiumpro ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : pentium2 : -march=pentium2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : pentium3 : -march=pentium3 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : pentium3m : -march=pentium3m ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : pentium-m : -march=pentium-m ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : pentium4 : -march=pentium4 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : pentium4m : -march=pentium4m ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : prescott : -march=prescott ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : nocona : -march=nocona ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : core2 : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : conroe : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : conroe-xe : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : conroe-l : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : allendale : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : wolfdale : -march=core2 -msse4.1 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : merom : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : merom-xe : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : kentsfield : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : kentsfield-xe : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : yorksfield : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : penryn : -march=core2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : corei7 : -march=corei7 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : nehalem : -march=corei7 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : corei7-avx : -march=corei7-avx ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : sandy-bridge : -march=corei7-avx ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : core-avx-i : -march=core-avx-i ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : ivy-bridge : -march=core-avx-i ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : haswell : -march=core-avx-i -mavx2 -mfma -mbmi -mbmi2 -mlzcnt ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : broadwell : -march=broadwell ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : skylake : -march=skylake ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : skylake-avx512 : -march=skylake-avx512 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : cannonlake : -march=skylake-avx512 -mavx512vbmi -mavx512ifma -msha ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : icelake : -march=icelake ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : k6 : -march=k6 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : k6-2 : -march=k6-2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : k6-3 : -march=k6-3 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : athlon : -march=athlon ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : athlon-tbird : -march=athlon-tbird ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : athlon-4 : -march=athlon-4 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : athlon-xp : -march=athlon-xp ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : athlon-mp : -march=athlon-mp ;
##
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : k8 : -march=k8 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : opteron : -march=opteron ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : athlon64 : -march=athlon64 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : athlon-fx : -march=athlon-fx ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : k8-sse3 : -march=k8-sse3 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : opteron-sse3 : -march=opteron-sse3 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : athlon64-sse3 : -march=athlon64-sse3 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : amdfam10 : -march=amdfam10 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : barcelona : -march=barcelona ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : bdver1 : -march=bdver1 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : bdver2 : -march=bdver2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : bdver3 : -march=bdver3 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : bdver4 : -march=bdver4 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : btver1 : -march=btver1 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : btver2 : -march=btver2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : znver1 : -march=znver1 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : winchip-c6 : -march=winchip-c6 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : winchip2 : -march=winchip2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : c3 : -march=c3 ;
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : c3-2 : -march=c3-2 ;
##
cpu-flags gcc_arm_none_eabi OPTIONS : x86 : atom : -march=atom ;
# Sparc
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : v7 : -mcpu=v7 : default ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : cypress : -mcpu=cypress ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : v8 : -mcpu=v8 ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : supersparc : -mcpu=supersparc ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : sparclite : -mcpu=sparclite ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : hypersparc : -mcpu=hypersparc ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : sparclite86x : -mcpu=sparclite86x ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : f930 : -mcpu=f930 ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : f934 : -mcpu=f934 ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : sparclet : -mcpu=sparclet ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : tsc701 : -mcpu=tsc701 ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : v9 : -mcpu=v9 ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : ultrasparc : -mcpu=ultrasparc ;
cpu-flags gcc_arm_none_eabi OPTIONS : sparc : ultrasparc3 : -mcpu=ultrasparc3 ;
# RS/6000 & PowerPC
cpu-flags gcc_arm_none_eabi OPTIONS : power : 403 : -mcpu=403 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 505 : -mcpu=505 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 601 : -mcpu=601 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 602 : -mcpu=602 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 603 : -mcpu=603 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 603e : -mcpu=603e ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 604 : -mcpu=604 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 604e : -mcpu=604e ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 620 : -mcpu=620 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 630 : -mcpu=630 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 740 : -mcpu=740 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 7400 : -mcpu=7400 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 7450 : -mcpu=7450 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 750 : -mcpu=750 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 801 : -mcpu=801 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 821 : -mcpu=821 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 823 : -mcpu=823 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 860 : -mcpu=860 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 970 : -mcpu=970 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : 8540 : -mcpu=8540 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : power : -mcpu=power ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : power2 : -mcpu=power2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : power3 : -mcpu=power3 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : power4 : -mcpu=power4 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : power5 : -mcpu=power5 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : powerpc : -mcpu=powerpc ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : powerpc64 : -mcpu=powerpc64 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : rios : -mcpu=rios ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : rios1 : -mcpu=rios1 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : rios2 : -mcpu=rios2 ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : rsc : -mcpu=rsc ;
cpu-flags gcc_arm_none_eabi OPTIONS : power : rs64a : -mcpu=rs64 ;
# AIX variant of RS/6000 & PowerPC
toolset.flags gcc_arm_none_eabi AROPTIONS <address-model>64/<target-os>aix : "-X64" ;
